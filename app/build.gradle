apply plugin: 'com.android.application'

import org.aspectj.bridge.IMessage
import org.aspectj.bridge.MessageHandler
import org.aspectj.tools.ajc.Main

buildscript {
    repositories {
        mavenCentral()
    }
    dependencies {
        classpath 'org.aspectj:aspectjtools:1.8.9'
    }
}

repositories {
    mavenCentral()
}

final def log = project.logger
final def variants = project.android.applicationVariants

variants.all { variant ->
    if (!variant.buildType.isDebuggable()) {
        log.debug("Skipping non-debuggable build type '${variant.buildType.name}'.")
        return;
    }

    JavaCompile javaCompile = variant.javaCompile
    javaCompile.doLast {
        String[] args = ["-showWeaveInfo",
                         "-1.5",
                         "-inpath", javaCompile.destinationDir.toString(),
                         "-aspectpath", javaCompile.classpath.asPath,
                         "-d", javaCompile.destinationDir.toString(),
                         "-classpath", javaCompile.classpath.asPath,
                         "-bootclasspath", project.android.bootClasspath.join(File.pathSeparator)]
        log.debug "ajc args: " + Arrays.toString(args)

        MessageHandler handler = new MessageHandler(true);
        new Main().run(args, handler);
        for (IMessage message : handler.getMessages(null, true)) {
            switch (message.getKind()) {
                case IMessage.ABORT:
                case IMessage.ERROR:
                case IMessage.FAIL:
                    log.error message.message, message.thrown
                    break;
                case IMessage.WARNING:
                    log.warn message.message, message.thrown
                    break;
                case IMessage.INFO:
                    log.info message.message, message.thrown
                    break;
                case IMessage.DEBUG:
                    log.debug message.message, message.thrown
                    break;
            }
        }
    }
}

android {
    compileSdkVersion compile_sdk_version.toInteger()
    defaultConfig {
        applicationId "com.rjp.fastframework"
        minSdkVersion min_sdk_version.toInteger()
        targetSdkVersion target_sdk_version.toInteger()
        versionCode version_code.toInteger()
        versionName version_name.toString()
        flavorDimensions "default"

        ndk {
            moduleName "hello"
            abiFilters "armeabi", "armeabi-v7a"
        }

        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"
    }

    signingConfigs {
        release {
            keyAlias 'rjp-key'
            keyPassword '123456'
            storeFile file('rjp.jks')
            storePassword '123456'
        }
    }

    sourceSets {
        main {
            jni.srcDirs = [] // disable automatic ndk-build call, which ignore our Android.mk
            jniLibs.srcDir 'src/main/libs'
        }
    }

    buildTypes {
        release {
            minifyEnabled false
            signingConfig signingConfigs.release
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }

    productFlavors {
        channel_A {
            applicationId "com.rjp.AAAAA"
            versionName "A1.0.0"
            manifestPlaceholders = [UMENG_CHANNEL_VALUE: "channel_A"]
        }
        channel_B {
            applicationId "com.rjp.BBBBB"
            versionName "B1.0.0"
            manifestPlaceholders = [UMENG_CHANNEL_VALUE: "channel_B"]
        }
    }

    applicationVariants.all {
        //判断是release还是debug版本
        def buildType = it.buildType.name
        def appVersion = it.versionName
        def fileName
        //下面的channel是获取渠道号，你获取渠道号不一定会和我的代码一样，因为有可能你的渠道名称的规则和我的不一样，我的规则是${渠道名}-${applicationId},所以我是这样取的。
        def channel = it.productFlavors[0].name
        //获取当前时间的"YYYY-MM-dd"格式。
//        def createTime = new Date().format("YYYY_MM_dd", TimeZone.getTimeZone("GMT+08:00"))
        def createTime = BUILD_TIME
        //只对Release包起作用，如果不是Release包则不变更输出路径，否则可能导致AS无法自动安装debug包。
        if (buildType == "release") {
            it.getPackageApplication().outputDirectory = new File(project.rootDir.absolutePath + "/auto-apks/${it.productFlavors[0].name}/${createTime}")
        }
        it.outputs.each {
            //只对Release包起作用，如果不是Release包则不变更名称。
            if (buildType == "release") {
                //我此处的命名规则是：项目名_渠道名_版本名_构建类型.apk

                fileName = APP_NAME + "-${channel}-v${appVersion}-${buildType}-${createTime}.apk"
//                fileName = APP_NAME + ".apk"
                //将名字打印出来，以便及时查看是否满意。
                println "文件名：-----------------${fileName}"
                //重新对apk命名。(适用于Gradle4.0以下版本)
                //it.outputFile = new File(it.outputFile.parent, fileName)
                //重新对apk命名。(适用于Gradle4.0（含）以上版本)如果你Gradle版本是4.0以下版本则将上面的一行代码放开并注释下面的这一行。
                it.outputFileName = fileName
            }
        }
    }
}

dependencies {
    implementation fileTree(include: ['*.jar'], dir: 'libs')
    implementation 'com.android.support:appcompat-v7:28.0.0'
    implementation 'com.android.support.constraint:constraint-layout:1.1.3'
    testImplementation 'junit:junit:4.12'
    androidTestImplementation 'com.android.support.test:runner:1.0.2'
    androidTestImplementation 'com.android.support.test.espresso:espresso-core:3.0.2'
    implementation project(path: ':expandframework')
    //    implementation 'com.blankj:utilcode:1.21.2'
    implementation 'com.github.bumptech.glide:glide:3.7.0'
    implementation 'org.aspectj:aspectjrt:1.8.9'
    implementation 'com.android.support:design:28.0.0'
    //下载库
    implementation 'com.liulishuo.filedownloader:library:1.7.4'
    if (!loginRunAlone.toBoolean()) {
        implementation project(':logincomponent')
    }
    if (!shopRunAlone.toBoolean()) {
        implementation project(':shopcomponent')
    }
    implementation project(':commonlib')
}
